{"version":3,"sources":["App.module.css","constants.ts","services/firestore.ts","redux/slices/placesSlice.ts","redux/slices/inventorySlice.ts","components/PlacesTree/PlacesTree.tsx","components/InventoryTable/InventoryTable.tsx","App.tsx","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","PLACES_IDS","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","placeConverter","toFirestore","fromFirestore","snapshot","data","name","parts","inventoryConvertor","inventory","count","place","id","getPlaces","a","collection","withConverter","get","then","response","docs","map","getInventory","filter","includes","placeId","postInventory","Error","add","docref","setInventory","InventoryId","fields","doc","update","deleteInventory","delete","placesSlice","createSlice","initialState","placeById","allIds","isLoading","error","activePlaceId","reducers","getPlacesStart","state","getPlacesSucess","payload","forEach","push","setActivePlaceId","getPlacesFailure","action","actions","startLoading","loadingFailed","inventorySlice","inventoryByPlaceId","inventoryById","getInventoryStart","postInventoryStart","setInventoryStart","deleteInventoryStart","getInventorySucess","byPlaceId","byId","Object","values","postInventorySucess","setInventorySucess","targetInventory","find","deleteInventorySucess","inventoryId","getInventoryFailure","postInventoryFailure","setInventoryFailure","deleteInventoryFailure","getPartsInventoryAmount","places","partId","iter","amount","partPlace","inventoryAmount","length","reduce","sum","partPlacePartId","PlacesTree","dispath","useDispatch","useSelector","renderedNodes","viewBox","width","height","rootNodes","undefined","TreeView","defaultExpandIcon","defaultCollapseIcon","onNodeSelect","e","nodeId","renderNode","node","currentNodeInventoryAmount","totalInventoryAmount","TreeItem","key","label","InventoryTabel","placeName","innerPlaceId","inventoryList","cloneDeep","innerPlaceInventory","acc","getInventoryDataByPlaceId","title","columns","field","validate","rowData","type","style","maxWidth","minWidth","minHeight","editable","onRowUpdate","newData","oldData","Promise","res","dispatch","setInventoryToDB","message","onRowAdd","postData","postInventoryToDB","onRowDelete","deleteInventoryFromDB","App","useEffect","fetchedPlaces","getInventoryFromDB","fetchedInvenory","className","styles","main","aside","tableSection","rootReducer","combineReducers","placesReducer","inventoryReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f18a1f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3ZkGI\",\"aside\":\"App_aside__HVdR9\",\"tableSection\":\"App_tableSection__2qRO3\"};","export const PLACES_IDS = [\n  'main',\n  'main-101',\n  'main-102',\n  'main-head',\n  'main-left',\n  'main-right',\n  'production',\n  'production-1',\n  'production-2',\n];\n","import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nimport { IPlace, IInventory } from './../interfaces';\nimport { PLACES_IDS } from '../constants';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MSG_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase.firestore();\n\n// Firestore Models (like it must be)\n\ninterface ModelPart {\n  id: string;\n}\n\ninterface ModelPlace {\n  name: string;\n  parts: ModelPart[] | undefined;\n}\n\nexport interface ModelInventory {\n  name: string;\n  count: number;\n  place: { id: string };\n}\n\n// Converters\n\nconst placeConverter = {\n  toFirestore() {\n    return {};\n  },\n  fromFirestore(\n    snapshot: firebase.firestore.QueryDocumentSnapshot\n  ): ModelPlace {\n    const data = snapshot.data();\n    return {\n      name: data.name,\n      parts: data.parts,\n    };\n  },\n};\n\nconst inventoryConvertor = {\n  toFirestore(inventory: ModelInventory): firebase.firestore.DocumentData {\n    return {\n      name: inventory.name,\n      count: inventory.count,\n      place: inventory.place,\n    };\n  },\n  fromFirestore(\n    snapshot: firebase.firestore.QueryDocumentSnapshot\n  ): ModelInventory {\n    const data = snapshot.data();\n    return {\n      name: data.name,\n      count: data.count,\n      place: { id: data.place?.id },\n    };\n  },\n};\n\n// DB calls\n\nexport async function getPlaces(): Promise<IPlace[]> {\n  return await db\n    .collection('places')\n    .withConverter(placeConverter)\n    .get()\n    .then((response) => {\n      return response.docs.map((place) => {\n        return {\n          id: place.id,\n          name: place.data().name,\n          parts: place.data().parts?.map(({ id }) => id),\n        };\n      });\n    });\n}\n\nexport async function getInventory(): Promise<IInventory[]> {\n  // Because fields in documents are not typed and required in firestore I need to filter incoming data (that sucks)\n  return await db\n    .collection('inventory')\n    .withConverter(inventoryConvertor)\n    .get()\n    .then((response) => {\n      return response.docs\n        .filter((inventory) => {\n          const { name, count, place } = inventory.data();\n          /* Someone posted inventory object like this with not exist placeId in known places('main', 'main-101', ...): \n            {\n              id: \"rc0FfsGmkd03FeHNd7pu\",\n              name: \"Test\",\n              count: 1,\n              placeId: \"8kLxGNeVCBgVeErQzz5T\" -> UNKNOWN placeId\n            }\n          */\n          if (place && place.id && PLACES_IDS.includes(place.id)) {\n            if (name && typeof name === 'string') {\n              if (count && typeof count === 'number') {\n                return true;\n              }\n            }\n          }\n        })\n        .map((inventory) => {\n          return {\n            id: inventory.id,\n            name: inventory.data().name,\n            count: inventory.data().count,\n            placeId: inventory.data().place.id,\n          };\n        });\n    });\n}\n\nexport async function postInventory(inventory: ModelInventory) {\n  const { name, count, place } = inventory;\n\n  if (!PLACES_IDS.includes(place.id)) {\n    throw new Error('Такого места не существует!');\n  }\n\n  return await db\n    .collection('inventory')\n    .withConverter(inventoryConvertor)\n    .add({\n      name,\n      count,\n      place,\n    })\n    .then((docref) => docref.id);\n}\n\nexport async function setInventory(\n  InventoryId: string,\n  fields: { name: string; count: number }\n) {\n  return await db\n    .collection('inventory')\n    .withConverter(inventoryConvertor)\n    .doc(InventoryId)\n    .update(fields);\n}\n\nexport async function deleteInventory(InventoryId: string) {\n  return await db\n    .collection('inventory')\n    .withConverter(inventoryConvertor)\n    .doc(InventoryId)\n    .delete();\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from '../store';\n\nimport { IPlace } from './../../interfaces';\nimport { getPlaces } from '../../services/firestore';\n\ninterface PlacesState {\n  placeById: Record<string, IPlace>;\n  allIds: string[];\n  isLoading: boolean;\n  error: string | null;\n  activePlaceId: string | null;\n}\n\nconst placesInitialState: PlacesState = {\n  placeById: {},\n  allIds: [],\n  isLoading: false,\n  error: null,\n  activePlaceId: null,\n};\n\nfunction startLoading(state: PlacesState) {\n  state.isLoading = true;\n}\n\nfunction loadingFailed(state: PlacesState, action: PayloadAction<string>) {\n  state.isLoading = false;\n  state.error = action.payload;\n}\n\nconst placesSlice = createSlice({\n  name: 'places',\n  initialState: placesInitialState,\n  reducers: {\n    getPlacesStart: startLoading,\n    getPlacesSucess(state, { payload }: PayloadAction<IPlace[]>) {\n      state.isLoading = false;\n      state.error = null;\n\n      payload.forEach((place) => {\n        state.allIds.push(place.id);\n        state.placeById[place.id] = place;\n      });\n    },\n    setActivePlaceId(state, { payload }: PayloadAction<string>) {\n      state.activePlaceId = payload;\n    },\n    getPlacesFailure: loadingFailed,\n  },\n});\n\nexport const {\n  getPlacesStart,\n  getPlacesSucess,\n  setActivePlaceId,\n  getPlacesFailure,\n} = placesSlice.actions;\nexport default placesSlice.reducer;\n\nexport const fetchPlaces = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(getPlacesStart());\n    const fetchedPlaces = await getPlaces();\n    dispatch(getPlacesSucess(fetchedPlaces));\n  } catch (error) {\n    dispatch(getPlacesFailure(error.message));\n  }\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from '../store';\n\nimport { IInventory } from './../../interfaces';\nimport {\n  getInventory as getInventoryFromDB,\n  postInventory as postInventoryToDB,\n  setInventory as setInventoryToDB,\n  deleteInventory as deleteInventoryFromDB,\n  ModelInventory,\n} from '../../services/firestore';\n\ninterface InventoryState {\n  inventoryByPlaceId: Record<string, IInventory[]>;\n  inventoryById: Record<string, IInventory>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst inventoryInitialState: InventoryState = {\n  inventoryByPlaceId: {},\n  inventoryById: {},\n  isLoading: false,\n  error: null,\n};\n\nfunction startLoading(state: InventoryState) {\n  state.isLoading = true;\n}\n\nfunction loadingFailed(state: InventoryState, action: PayloadAction<string>) {\n  state.isLoading = false;\n  state.error = action.payload;\n}\n\nfunction loadInventorySucess(state: InventoryState) {\n  state.isLoading = false;\n  state.error = null;\n}\n\nconst inventorySlice = createSlice({\n  name: 'inventory',\n  initialState: inventoryInitialState,\n  reducers: {\n    getInventoryStart: startLoading,\n    postInventoryStart: startLoading,\n    setInventoryStart: startLoading,\n    deleteInventoryStart: startLoading,\n    getInventorySucess(state, { payload }: PayloadAction<IInventory[]>) {\n      state.isLoading = false;\n      state.error = null;\n\n      const byPlaceId = state.inventoryByPlaceId;\n      const byId = state.inventoryById;\n\n      payload.forEach((inventory) => {\n        const { id, placeId } = inventory;\n\n        byId[id] = inventory;\n      });\n\n      Object.values(state.inventoryById).forEach((inventory) => {\n        const { placeId } = inventory;\n        if (placeId in byPlaceId) {\n          byPlaceId[placeId].push(inventory);\n        } else {\n          byPlaceId[placeId] = [inventory];\n        }\n      });\n    },\n    postInventorySucess(\n      state,\n      { payload }: PayloadAction<{ id: string; inventory: ModelInventory }>\n    ) {\n      state.error = null;\n      const { id, inventory } = payload;\n      const { name, count, place } = inventory;\n\n      if (!state.inventoryByPlaceId[place.id]) {\n        state.inventoryByPlaceId[place.id] = [\n          {\n            id,\n            name,\n            count,\n            placeId: place.id,\n          },\n        ];\n      } else {\n        state.inventoryByPlaceId[place.id].push({\n          id,\n          name,\n          count,\n          placeId: place.id,\n        });\n      }\n    },\n    setInventorySucess(\n      state,\n      {\n        payload,\n      }: PayloadAction<{\n        placeId: string;\n        id: string;\n        fields: { name: string; count: number };\n      }>\n    ) {\n      state.error = null;\n\n      const {\n        placeId,\n        id,\n        fields: { name, count },\n      } = payload;\n\n      const targetInventory = state.inventoryByPlaceId[placeId].find(\n        (inventory) => inventory.id === id\n      );\n\n      if (targetInventory) {\n        targetInventory.name = name;\n        targetInventory.count = count;\n      }\n    },\n    deleteInventorySucess(\n      state,\n      { payload }: PayloadAction<{ placeId: string; id: string }>\n    ) {\n      const { placeId, id: inventoryId } = payload;\n\n      state.inventoryByPlaceId[placeId] = state.inventoryByPlaceId[\n        placeId\n      ].filter(({ id }) => {\n        return id !== inventoryId;\n      });\n    },\n    getInventoryFailure: loadingFailed,\n    postInventoryFailure: loadingFailed,\n    setInventoryFailure: loadingFailed,\n    deleteInventoryFailure: loadingFailed,\n  },\n});\n\nexport const {\n  getInventoryStart,\n  postInventoryStart,\n  setInventoryStart,\n  deleteInventoryStart,\n  getInventorySucess,\n  postInventorySucess,\n  setInventorySucess,\n  deleteInventorySucess,\n  getInventoryFailure,\n  postInventoryFailure,\n  setInventoryFailure,\n  deleteInventoryFailure,\n} = inventorySlice.actions;\nexport default inventorySlice.reducer;\n\nexport const fetchInventory = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(getInventoryStart());\n    const fetchedInvenory = await getInventoryFromDB();\n    dispatch(getInventorySucess(fetchedInvenory));\n  } catch (error) {\n    dispatch(getInventoryFailure(error.message));\n  }\n};\n\nexport const postInventory = (inventory: ModelInventory): AppThunk => async (\n  dispatch\n) => {\n  try {\n    dispatch(postInventoryStart());\n    const id = await postInventoryToDB(inventory);\n    dispatch(postInventorySucess({ id, inventory }));\n  } catch (error) {\n    dispatch(postInventoryFailure(error.message));\n  }\n};\n\nexport const setInventory = (\n  placeId: string,\n  inventoryId: string,\n  fields: { name: string; count: number }\n): AppThunk => async (dispatch) => {\n  try {\n    dispatch(setInventoryStart());\n    await setInventoryToDB(inventoryId, fields);\n    dispatch(setInventorySucess({ placeId, id: inventoryId, fields }));\n  } catch (error) {\n    dispatch(setInventoryFailure(error.message));\n  }\n};\n\nexport const deleteInventory = (\n  placeId: string,\n  inventoryId: string\n): AppThunk => async (dispatch) => {\n  try {\n    dispatch(deleteInventoryStart());\n    await deleteInventoryFromDB(inventoryId);\n    dispatch(deleteInventorySucess({ placeId, id: inventoryId }));\n  } catch (error) {\n    dispatch(deleteInventoryFailure(error.message));\n  }\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../redux/rootReducer';\nimport { setActivePlaceId } from '../../redux/slices/placesSlice';\n\nimport { TreeView, TreeItem } from '@material-ui/lab';\nimport Icon from '@material-ui/core/Icon';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport { List as ListPrloader } from 'react-content-loader';\n\nimport { IPlace, IInventory } from '../../interfaces';\n\ninterface PlaceTreeProps {\n  places: Record<string, IPlace>;\n  inventory: Record<string, IInventory[]>;\n}\n\ninterface PlaceNode {\n  id: string;\n  name: string;\n  parts: string[];\n}\n\nconst getPartsInventoryAmount = (\n  places: Record<string, IPlace>,\n  inventory: Record<string, IInventory[]>\n) => (parts: string[] | undefined): number => {\n  if (!parts) {\n    return 0;\n  }\n\n  const iter = (partId: string, amount: number): number => {\n    const partPlace: IPlace = places[partId];\n    const inventoryAmount = inventory[partPlace.id]\n      ? inventory[partPlace.id].length + amount\n      : 0;\n\n    if (!partPlace.parts) {\n      return inventoryAmount;\n    }\n\n    return partPlace.parts.reduce(\n      (sum, partPlacePartId) => iter(partPlacePartId, sum),\n      inventoryAmount\n    );\n  };\n\n  return parts\n    .map((partId) => iter(partId, 0))\n    .reduce((sum, amount) => sum + amount, 0);\n};\n\nexport const PlacesTree: React.FC<PlaceTreeProps> = ({ places, inventory }) => {\n  const dispath = useDispatch();\n\n  const { isLoading, error: placesError } = useSelector(\n    (state: RootState) => state.places\n  );\n\n  const renderedNodes: string[] = [];\n\n  const renderNode = (node: IPlace) => {\n    const { id, name, parts } = node;\n\n    if (renderedNodes.includes(id)) {\n      return null;\n    }\n\n    const currentNodeInventoryAmount = inventory[id] ? inventory[id].length : 0;\n    const totalInventoryAmount =\n      getPartsInventoryAmount(places, inventory)(parts) +\n      currentNodeInventoryAmount;\n\n    renderedNodes.push(id);\n\n    return (\n      <TreeItem\n        key={id}\n        // nodeId={uuidv4()}\n        nodeId={id}\n        label={\n          totalInventoryAmount > 0 ? (\n            <>\n              {name}: <b>{totalInventoryAmount}</b>\n            </>\n          ) : (\n            name\n          )\n        }\n      >\n        {parts &&\n          parts.map((placeId) => {\n            return renderNode(places[placeId]);\n          })}\n      </TreeItem>\n    );\n  };\n\n  if (isLoading) {\n    return <ListPrloader viewBox='0 0 400 110' width='100%' height='100%' />;\n  }\n\n  const rootNodes = Object.values(places).filter(\n    ({ parts }) => parts !== undefined\n  );\n\n  const handleNodeSelect = (e: React.ChangeEvent<{}>, nodeId: string) => {\n    dispath(setActivePlaceId(nodeId));\n  };\n\n  return (\n    <TreeView\n      defaultExpandIcon={<ChevronRightIcon />}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      onNodeSelect={handleNodeSelect}\n    >\n      {rootNodes &&\n        rootNodes.map((place) => {\n          return renderNode(place);\n        })}\n    </TreeView>\n  );\n};\n","import React from 'react';\nimport MaterialTable, { Column } from 'material-table';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/rootReducer';\nimport {\n  setInventory,\n  postInventory,\n  deleteInventory,\n} from '../../redux/slices/inventorySlice';\n\nimport { cloneDeep } from 'lodash';\n\nimport { IInventory, IPlace } from '../../interfaces';\nimport { ModelInventory } from '../../services/firestore';\n\nconst getInventoryDataByPlaceId = (\n  placeId: string,\n  places: Record<string, IPlace>,\n  inventory: Record<string, IInventory[]>\n) => {\n  const iter = (\n    innerPlaceId: string,\n    inventoryList: IInventory[]\n  ): IInventory[] => {\n    const haveParts = places[innerPlaceId].parts ? true : false;\n\n    if (!haveParts) {\n      return inventory[innerPlaceId]\n        ? [...inventoryList, ...inventory[innerPlaceId].map(cloneDeep)]\n        : [...inventoryList.map(cloneDeep)];\n    }\n\n    const parts = places[innerPlaceId].parts;\n\n    const innerPlaceInventory = inventory[innerPlaceId]\n      ? [...inventory[innerPlaceId].map(cloneDeep)]\n      : [];\n\n    return [\n      ...inventoryList.map(cloneDeep),\n      ...parts?.reduce((acc, partId) => iter(partId, acc), innerPlaceInventory),\n    ];\n  };\n\n  return iter(placeId, []);\n};\n\ninterface InventoryTableProps {\n  places: Record<string, IPlace>;\n  inventory: Record<string, IInventory[]>;\n  activePlaceId: string;\n}\n\nexport const InventoryTabel: React.FC<InventoryTableProps> = ({\n  places,\n  inventory,\n  activePlaceId,\n}) => {\n  /* \n    Because material-table mutate entities and firestore return document.data() with preventExtensions\n    I have to deepClone\n  */\n  const dispath = useDispatch();\n  const placeName = useSelector((state: RootState) => {\n    return state.places.placeById[activePlaceId].name;\n  });\n\n  const columns: Column<IInventory>[] = [\n    {\n      title: 'Инвентарь',\n      field: 'name',\n      validate: (rowData) => rowData.name !== '',\n    },\n    {\n      title: 'Кол-во',\n      field: 'count',\n      type: 'numeric',\n      validate: (rowData) => rowData.count > 0,\n    },\n  ];\n\n  const data = getInventoryDataByPlaceId(activePlaceId, places, inventory);\n\n  return (\n    <MaterialTable\n      title={placeName}\n      columns={columns}\n      data={data}\n      style={{ maxWidth: '1000px', minWidth: '800px', minHeight: '400px' }}\n      editable={{\n        onRowUpdate(newData, oldData) {\n          return new Promise((res) => {\n            if (oldData) {\n              dispath(setInventory(oldData.placeId, oldData.id, newData));\n              res();\n            }\n          });\n        },\n        onRowAdd(newData) {\n          return new Promise((res) => {\n            const { name, count } = newData;\n            const postData: ModelInventory = {\n              name,\n              count,\n              place: { id: activePlaceId },\n            };\n            res();\n            dispath(postInventory(postData));\n          });\n        },\n        onRowDelete(oldData) {\n          return new Promise((res) => {\n            if (oldData) {\n              dispath(deleteInventory(oldData.placeId, oldData.id));\n              res();\n            }\n          });\n        },\n      }}\n    />\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport { RootState } from './redux/rootReducer';\nimport { fetchPlaces } from './redux/slices/placesSlice';\nimport { fetchInventory } from './redux/slices/inventorySlice';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PlacesTree } from './components/PlacesTree/PlacesTree';\nimport { InventoryTabel } from './components/InventoryTable/InventoryTable';\n\nimport { db, setInventory, getInventory } from './services/firestore';\n\nimport styles from './App.module.css';\nimport { IInventory } from './interfaces';\n// (async () => {\n// await setInventory('aKA0l5QF3uzxz0577zhg', { count: 10 });\n// console.log(await getInventory());\n//   await db\n//     .collection('inventory')\n//     .get()\n//     .then((response) => {\n//       let docs = response.docs.map((x) => ({\n//         id: x.id,\n//         name: x.data().name,\n//         count: x.data().count,\n//         placeId: x.data().place ? x.data().place.id : undefined,\n//       }));\n//       console.info(docs);\n//     });\n// })();\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const places = useSelector((state: RootState) => {\n    return state.places.placeById;\n  });\n\n  const activePlaceId = useSelector((state: RootState) => {\n    return state.places.activePlaceId;\n  });\n\n  // const inventoryByplaceId: Record<string, IInventory[]> = useSelector(\n  //   (state: RootState) => {\n  //     return Object.values(state.inventory.inventoryById).reduce(\n  //       (acc: Record<string, IInventory[]>, inventoryEntity) => {\n  //         const { placeId } = inventoryEntity;\n  //         if (acc[placeId]) {\n  //           return { ...acc, [placeId]: [...acc[placeId], inventoryEntity] };\n  //         }\n  //         return { ...acc, [placeId]: [inventoryEntity] };\n  //       },\n  //       {}\n  //     );\n  //   }\n  // );\n\n  const inventory = useSelector((state: RootState) => {\n    return state.inventory.inventoryByPlaceId;\n  });\n\n  useEffect(() => {\n    dispatch(fetchPlaces());\n    dispatch(fetchInventory());\n  }, []);\n\n  return (\n    <div className='App'>\n      <main className={styles.main}>\n        <aside className={styles.aside}>\n          <PlacesTree places={places} inventory={inventory} />\n        </aside>\n        <section className={styles.tableSection}>\n          {activePlaceId && (\n            <InventoryTabel\n              places={places}\n              inventory={inventory}\n              activePlaceId={activePlaceId}\n            />\n          )}\n        </section>\n      </main>\n    </div>\n  );\n};\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport placesReducer from './slices/placesSlice';\nimport inventoryReducer from './slices/inventorySlice';\n\nconst rootReducer = combineReducers({\n  places: placesReducer,\n  inventory: inventoryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit';\nimport { ThunkAction } from 'redux-thunk';\n\nimport rootReducer, { RootState } from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './App';\n\nimport store from './redux/store';\n\nimport './index.css';\n// import { getPlaces } from './services/firestore';\n\n// (async () => {\n//   console.log(await getPlaces());\n// })();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}